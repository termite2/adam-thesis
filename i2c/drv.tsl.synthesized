import <class.tsl>
import <i2c.tsl>
import <os.tsl>

template i2c_linux_drv(i2c_dev_m3 dev, i2c_linux os)

derive i2c_drv;

task uncontrollable void configure(){
    //address = 0x54
    dev.write8_i2cadd(/*any value*/1'h0 ++ 7'h54); 

    //clc = SDA_DELAY15CLK | FILE_EN
    dev.write8_i2clc(2'h3 ++ 1'h1 ++ /*any value*/5'h0);

    //control = ACK_EN | CLK_SRC | PRESCALE(3) | IRQ_EN &~ IRQ_PENDING
    dev.write8_i2ccon(4'h3 ++ 1'h0 ++ 1'h1 ++ 1'h1 ++ 1'h1);
};

task uncontrollable void send_address(){
    //control = ACK_EN | CLK_SRC | PRESCALE(3) | IRQ_EN &~ IRQ_PENDING
    dev.write8_i2ccon(4'h3 ++ 1'h0 ++ 1'h1 ++ 1'h1 ++ 1'h1);

    //data = os_addr (&~ 1)
    dev.write8_i2cds(1'h0 ++ os.os_addr); 

    //stat = MODE_MTX | ENABLE | BUSY
    dev.write8_i2cstat(/*any value*/4'h0 ++ 1'h1 ++ 1'h1 ++ 2'h3);

    //wait(control & IRQ_PENDING)
    uint<8> stat;
    do {
        stat = dev.read8_i2ccon();
    } while(stat[4:4] == 0);(*@\label{l:drv_manual_loop}@*)
};

task uncontrollable void send_data(){
    //data = os_data
    dev.write8_i2cds(os.os_data);

    //control = ACK_EN | CLK_SRC | PRESCALE(3) | IRQ_EN &~ IRQ_PENDING
    dev.write8_i2ccon(4'h3 ++ 1'h0 ++ 1'h1 ++ 1'h1 ++ 1'h1);

    //wait(control & IRQ_PENDING)
    uint<8> stat;
    do {
        stat = dev.read8_i2ccon();
    } while(stat[4:4] == 0);
};

task uncontrollable void send_stop(){
    //stat = ANY_MODE | ENABLE &~ BUSY 
    dev.write8_i2cstat(/*any value*/4'h0 ++ 1'h1 ++ 1'h0 ++ /*any value*/2'h0); 

    //control = ACK_EN | CLK_SRC | PRESCALE(3) | IRQ_EN &~ IRQ_PENDING
    dev.write8_i2ccon(4'h3 ++ 1'h0 ++ 1'h1 ++ 1'h1 ++ 1'h1);

    //wait(control & IRQ_PENDING)
    uint<8> stat;
    do {
        stat = dev.read8_i2cstat();
    } while(stat[5:5] == 1); 
};

task uncontrollable bool send_address_read(){
    //control = ACK_EN | CLK_SRC | PRESCALE(3) | IRQ_EN &~ IRQ_PENDING
    dev.write8_i2ccon(4'h3 ++ 1'h0 ++ 1'h1 ++ 1'h1 ++ 1'h1);

    //data = os_addr (| 1)
    dev.write8_i2cds(1'h1 ++ os.os_read_addr); 

    //stat = MODE_MRX | ENABLE | BUSY
    dev.write8_i2cstat(/*any value*/4'h0 ++ 1'h1 ++ 1'h1 ++ 2'h2);

    //wait(control & IRQ_PENDING)
    uint<8> stat;
    do {
        stat = dev.read8_i2ccon();
    } while(stat[4:4] == 0);

    uint<8> res = dev.read8_i2cstat();
    return (res[0:0] == 1);
};

task uncontrollable uint<8> read_data(bool ack){
    //control = ACK_EN | CLK_SRC | PRESCALE(3) | IRQ_EN &~ IRQ_PENDING
    if(ack){
        dev.write8_i2ccon(4'h3 ++ 1'h0 ++ 1'h1 ++ 1'h1 ++ 1'h1);
    } else {
        dev.write8_i2ccon(4'h3 ++ 1'h0 ++ 1'h1 ++ 1'h1 ++ 1'h0);
    };

    //wait(control & IRQ_PENDING)
    uint<8> stat;
    do {
        stat = dev.read8_i2ccon();
    } while(stat[4:4] == 0);

    return dev.read8_i2cds();
};

endtemplate
